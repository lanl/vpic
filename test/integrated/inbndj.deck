// Test in-cell particle movement and current accumulation
//
//
// This input deck was written by:
//   Kevin J Bowers, Ph.D.
//   Plasma Physics Group (X-1)
//   Applied Physics Division
//   Los Alamos National Lab
// March/April 2004 - conversion of c++ test code into an input deck

#include <time.h>

#define NPART 131

begin_globals {
};

begin_initialization {
  seed_entropy( (int)boot_timestamp );

  define_units( 1, 1 );
  define_timestep( 1 );
  define_periodic_grid( 0,   0,   0,   // Grid low corner
                        0.5, 0.5, 0.5, // Grid high corner
                        1, 1, 1,       // Grid resolution
                        1, 1, 1 );     // Processor configuration
  define_material("vacuum",1.0,1.0,0.0);
  define_field_array();

  species_t * sp = define_species( "test_species", 2., 1., NPART, NPART, 0, 0 );

  // Hack into vpic internals

  // Create the particle distribution

  float dx1[NPART], dy1[NPART], dz1[NPART];
  double cx = 0.5*(double)grid->dx/((double)grid->dt*(double)grid->cvac);
  double cy = 0.5*(double)grid->dx/((double)grid->dt*(double)grid->cvac);
  double cz = 0.5*(double)grid->dx/((double)grid->dt*(double)grid->cvac);

  sp->np = NPART;
  for( int n=0; n<NPART; n++ ) {
    float dx0 = uniform( rng(0), -1, 1 ); dx1[n] = uniform( rng(0), -1, 1 );
    float dy0 = uniform( rng(0), -1, 1 ); dy1[n] = uniform( rng(0), -1, 1 );
    float dz0 = uniform( rng(0), -1, 1 ); dz1[n] = uniform( rng(0), -1, 1 );
    double vx_c = cx*( (double)dx1[n] - (double)dx0 );
    double vy_c = cy*( (double)dy1[n] - (double)dy0 );
    double vz_c = cz*( (double)dz1[n] - (double)dz0 );
    double rgamma = sqrt( 1. - ( vx_c*vx_c + vy_c*vy_c + vz_c*vz_c ) );
    sp->p[n].i  = voxel(1,1,1);
    sp->p[n].dx = dx0;
    sp->p[n].dy = dy0;
    sp->p[n].dz = dz0;
    sp->p[n].ux = vx_c/rgamma;
    sp->p[n].uy = vy_c/rgamma;
    sp->p[n].uz = vz_c/rgamma;
    sp->p[n].w  = uniform( rng(0), 0, 1 );
  }

  // Compute the initial charge density

  double rho0[8];
  CLEAR( rho0, 8 );
  for( int n=0; n<NPART; n++ ) {
    double dx = sp->p[n].dx, dy = sp->p[n].dy, dz = sp->p[n].dz;
    double q  = 0.125*(double)sp->q*(double)sp->p[n].w;
    rho0[0] += q * ( 1 - dx ) * ( 1 - dy ) * ( 1 - dz );
    rho0[1] += q * ( 1 + dx ) * ( 1 - dy ) * ( 1 - dz );
    rho0[2] += q * ( 1 - dx ) * ( 1 + dy ) * ( 1 - dz );
    rho0[3] += q * ( 1 + dx ) * ( 1 + dy ) * ( 1 - dz );
    rho0[4] += q * ( 1 - dx ) * ( 1 - dy ) * ( 1 + dz );
    rho0[5] += q * ( 1 + dx ) * ( 1 - dy ) * ( 1 + dz );
    rho0[6] += q * ( 1 - dx ) * ( 1 + dy ) * ( 1 + dz );
    rho0[7] += q * ( 1 + dx ) * ( 1 + dy ) * ( 1 + dz );
  }

  // Advance the particles

  clear_accumulator_array( accumulator_array );
  advance_p( sp, accumulator_array, interpolator_array );
  reduce_accumulator_array( accumulator_array );

  // Compute the final charge density

  double rho1[8];
  CLEAR( rho1, 8 );
  for( int n=0; n<NPART; n++ ) {
    double dx = sp->p[n].dx, dy = sp->p[n].dy, dz = sp->p[n].dz;
    double q  = 0.125*(double)sp->q*(double)sp->p[n].w;
    rho1[0] += q * ( 1 - dx ) * ( 1 - dy ) * ( 1 - dz );
    rho1[1] += q * ( 1 + dx ) * ( 1 - dy ) * ( 1 - dz );
    rho1[2] += q * ( 1 - dx ) * ( 1 + dy ) * ( 1 - dz );
    rho1[3] += q * ( 1 + dx ) * ( 1 + dy ) * ( 1 - dz );
    rho1[4] += q * ( 1 - dx ) * ( 1 - dy ) * ( 1 + dz );
    rho1[5] += q * ( 1 + dx ) * ( 1 - dy ) * ( 1 + dz );
    rho1[6] += q * ( 1 - dx ) * ( 1 + dy ) * ( 1 + dz );
    rho1[7] += q * ( 1 + dx ) * ( 1 + dy ) * ( 1 + dz );
  }

  // Compute the change in the charge density

  double drho[8];
  for( int n=0; n<8; n++) drho[n] = rho1[n] - rho0[n];

  // Compute the div J

  accumulator_t *a = &accumulator_array->a[ voxel(1,1,1) ];
  double divj[8];
  divj[0] = 0.25*(  (double)a->jx[0] + (double)a->jy[0] + (double)a->jz[0] ); // -1,-1,-1
  divj[1] = 0.25*( -(double)a->jx[0] + (double)a->jy[2] + (double)a->jz[1] ); //  1,-1,-1
  divj[2] = 0.25*(  (double)a->jx[1] - (double)a->jy[0] + (double)a->jz[2] ); // -1, 1,-1
  divj[3] = 0.25*( -(double)a->jx[1] - (double)a->jy[2] + (double)a->jz[3] ); //  1, 1,-1
  divj[4] = 0.25*(  (double)a->jx[2] + (double)a->jy[1] - (double)a->jz[0] ); // -1,-1, 1
  divj[5] = 0.25*( -(double)a->jx[2] + (double)a->jy[3] - (double)a->jz[1] ); //  1,-1, 1
  divj[6] = 0.25*(  (double)a->jx[3] - (double)a->jy[1] - (double)a->jz[2] ); // -1, 1, 1
  divj[7] = 0.25*( -(double)a->jx[3] - (double)a->jy[3] - (double)a->jz[3] ); //  1, 1, 1

  // Test the results

  int failed = 0;
  double tol = 4;
  double eps = FLT_EPSILON*0.81650; // disp_mean = 0, disp_rms = sqrt(2/3)
  for( int n=0; n<NPART; n++ ) {
    double errx = (double)dx1[n] - (double)sp->p[n].dx;
    double erry = (double)dy1[n] - (double)sp->p[n].dy;
    double errz = (double)dz1[n] - (double)sp->p[n].dz;
    if( fabs(errx) > tol*eps || fabs(erry) > tol*eps || fabs(errz) > tol*eps ) {
      failed++;
      sim_log( n << " " << errx/eps << " " << erry/eps << " " << errz/eps );
    }
  }
  if( failed ) { sim_log( "pos test: FAIL" ); abort(1); }
  /**/           sim_log( "pos test: pass" );

  // Note:  mean of drho = 0, rms of drho = sqrt(2/27-2/64) sqrt(NPART)
  failed = 0;
  tol = 10; // ~10x worse if single precision reduction used on SPE
  eps = FLT_EPSILON*0.20694*sqrt(NPART); // drho_mean = 0, drho_rms = sqrt(2/27-2/64)
  for( int n=0; n<8; n++ ) {
    double err = drho[n] + divj[n];
    if( fabs(err) > tol*eps ) {
      failed++;
      sim_log( n << " " << drho[n]  << " " << -divj[n] << " " << err/eps );
    }
  }
  if( failed ) { sim_log( "div test: FAIL" ); abort(1); }
  sim_log( "div test: pass" );
  halt_mp();
  exit(0);
}

begin_diagnostics {
}

begin_particle_injection {
}

begin_current_injection {
}

begin_field_injection {
}

begin_particle_collisions {
}


