// Test Cyclotron motion in a constant magnetic field
//
// Note:
// wc = q B / m gamma ==> wc dt = q dt B / m gamma ==>
// wc dt = q dt c B / m c gamma ==> wc dt = 2 ( q dt / 2 m c ) ( c B ) / gamma
//
// With c = 1, dt = 1, gamma = 2, q = 2, m = 1
// wc dt = c B
// 2 pi dt / tauc = c B
// 2 pi / Nstep = c B
//
// This input deck was written by:
//   Kevin J Bowers, Ph.D.
//   Plasma Physics Group (X-1)
//   Applied Physics Division
//   Los Alamos National Lab
// March/April 2004 - conversion of c++ test code into an input deck

begin_globals {
};

begin_initialization {
  double L  = 1e10;
  int npart = 131;
  int nstep = 64;

  define_units( 1, 1 );
  define_timestep( 1 );
  define_periodic_grid( 0, 0, 0,   // Grid low corner
                        L, L, L,   // Grid high corner
                        1, 1, 1,   // Grid resolution
                        1, 1, 1 ); // Processor configuration
  define_material("vacuum",1.0,1.0,0.0);
  define_field_array();

  field(1,1,1).cbz  = 2*M_PI / (double)nstep;
  field(1,1,2).cbz  = 2*M_PI / (double)nstep;

  species_t * sp = define_species( "test_species", 2, 1, npart, npart, 0, 0 );
  repeat(npart) inject_particle( sp,
                                 uniform( rng(0), 0, L ),
                                 uniform( rng(0), 0, L ),
                                 uniform( rng(0), 0, L ),
                                 1, 1, 1, // Gamma = 2
                                 uniform( rng(0), 0, 1 ),
                                 0, 0 );

  // Hack into vpic internals

  int failed = 0;
  load_interpolator_array( interpolator_array, field_array );
  for( int n=0; n<nstep; n++ ) {
    advance_p( sp, accumulator_array, interpolator_array );
    double ux = cos(2*M_PI*(0.125*nstep-(n+1))/(double)nstep) /
                cos(2*M_PI*(0.125*nstep)      /(double)nstep);
    double uy = sin(2*M_PI*(0.125*nstep-(n+1))/(double)nstep) /
                sin(2*M_PI*(0.125*nstep)      /(double)nstep);
    for( int m=0; m<npart; m++ ) {
      if( fabs(sp->p[m].ux-ux)>0.6e-6 ||
          fabs(sp->p[m].uy-uy)>0.6e-6 ||
          sp->p[m].uz != 1 ) {
        failed++;
        sim_log( n << " " << m << " " <<
                 sp->p[m].i  << " " <<
                 sp->p[m].dx << " " <<
                 sp->p[m].dy << " " <<
                 sp->p[m].dz << " " <<
                 sp->p[m].ux << " " <<
                 sp->p[m].uy << " " <<
                 sp->p[m].uz << " " <<
                 sp->p[m].w  << " " <<
                 ux << " " <<
                 uy << " " <<
                 sp->p[m].ux-ux << " " <<
                 sp->p[m].uy-uy );
      }
    }
  }
  if( failed ) { sim_log( "FAIL" ); abort(1); }
  sim_log( "pass" );
  halt_mp();
  exit(0);
}

begin_diagnostics {
}

begin_particle_injection {
}

begin_current_injection {
}

begin_field_injection {
}

begin_particle_collisions {
}


