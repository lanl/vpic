// Simulate TE_mn waveguide pulse reflecting off a waveguide short
//
// This input deck was written by:
//   Kevin J Bowers, Ph.D.
//   Plasma Physics Group (X-1)
//   Applied Physics Division
//   Los Alamos National Lab
// March/April 2004 - conversion of v4pic2 fdtd test code into an input deck
//
// INPUT DECK REVAMPED FOR NEW VPIC SOURCE TREE - BJA Feb. 2009

begin_globals {
  int M, N;
};

begin_initialization {
  if( nproc()!=2 ) {
    sim_log( "This test case requires two processor" );
    abort(0);
  }

  num_step = 2048;
  status_interval = 1;

  global->M = 1;
  global->N = 0;

  define_units( 1, 1 );
  define_timestep( 0.95/sqrt(3.0) );

  // Create a custom grid (these could be done easier with the helpers ...
  // this construction is to show how custom grids can be made manually).
  // FIXME: THIS CODE IS ALMOST CERTAIN BROKEN (ALL THE CONVENIENCE
  // FIELDS ARE NOT BEING SET!)
  grid->dx = 1;
  grid->dy = 1;
  grid->dz = 1;
  size_domain(32,32,128); // Particle reflecting metal box
  // Make the box into waveguide with a short termination at one end
  // An emitter will exist along the bottom of the box
  if( rank()==0 ) {
    grid->x0 = 0;
    grid->y0 = 0;
    grid->z0 = 0;
    set_domain_particle_bc( BOUNDARY( 0,-1, 0), absorb_particles );
    set_domain_field_bc(    BOUNDARY( 0, 0,-1), absorb_fields );
    join_domain( BOUNDARY(0,0,1), 1 );
  } else {
    grid->x0 = 0;
    grid->y0 = 0;
    grid->z0 = grid->nz*grid->dz;
    set_domain_particle_bc( BOUNDARY( 0,-1, 0), absorb_particles );
    join_domain( BOUNDARY(0,0,-1), 0 );
  }

  // Space is by default filled with first material defined
  define_material( "vacuum", 1.0, 1.0, 0.0 );
  define_field_array( NULL, 0.01 );

  // Create an electron species
  species_t * electron = define_species( "electron", -1, 1, 4000000, -1, 20, 1 );

  // Create an emitter
  // NOTE:  Cannot define emitters until species are finalized
  define_surface_emitter( child_langmuir( electron,
                                          interpolator_array,
                                          field_array,
                                          accumulator_array,
                                          entropy,
                                          1, /* Emit per face per step */
                                          0, /* uth para to surface normal */
                                          0, /* uth perp to surface normal */
                                          0, /* No emission threshold */
                                          CHILD_LANGMUIR ), /* Normalization */
                          y<0 || x<0 );
}

begin_diagnostics {
  species_t * sp = find_species_name( "electron", species_list );
  sim_log( sp->np );
}

begin_particle_injection {
}

begin_current_injection {
}

begin_field_injection {
  int n = global->N, m = global->M;

  if( rank()==0 && step()<192 ) {
    for( int y=1; y<=grid->ny+1; y++ )
      for( int x=1; x<=grid->nx; x++ )
        field(x,y,1).ex += n*sin(2.0*M_PI*step()/32.0)
                            *cos((m*M_PI/grid->nx)*(x-0.5))
                            *sin((n*M_PI/grid->ny)*(y-1));
    for( int y=1; y<=grid->ny; y++ )
      for( int x=1; x<=grid->nx+1; x++ )
        field(x,y,1).ey -= m*sin(2.0*M_PI*step()/32.0)
                            *sin((m*M_PI/grid->nx)*(x-1))
                            *cos((n*M_PI/grid->ny)*(y-0.5));
  }
}

begin_particle_collisions {
  // No collisions for this simulation
}
